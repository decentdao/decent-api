{
  "openapi": "3.0.0",
  "info": {
    "title": "Decent API",
    "description": "API for the Decent protocol",
    "version": "0.1.0",
    "contact": {
      "name": "Decent DAO",
      "url": "https://decentdao.org"
    }
  },
  "servers": [
    {
      "url": "https://api.decent.build",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3000",
      "description": "Localhost"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": ["meta"],
        "summary": "Get API metadata",
        "description": "Retrieve API metadata including version information",
        "security": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Meta"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["meta"],
        "summary": "Get API health status",
        "description": "Check if the API is healthy",
        "security": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Health"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/chains": {
      "get": {
        "tags": ["meta"],
        "summary": "Get all chains with DAOs",
        "description": "Retrieve a list of all supported chain IDs that have DAOs",
        "security": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/nonce": {
      "get": {
        "tags": ["auth"],
        "summary": "Get a nonce for SIWE authentication",
        "description": "Retrieve a nonce for Sign-In with Ethereum authentication",
        "security": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Nonce"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify": {
      "post": {
        "tags": ["auth"],
        "summary": "Verify a SIWE message and signature",
        "description": "Verify a Sign-In with Ethereum message and signature",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string"
                  },
                  "signature": {
                    "type": "string"
                  }
                },
                "required": ["message", "signature"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": ["auth"],
        "summary": "Get current user information",
        "description": "Retrieve information about the currently authenticated user",
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["auth"],
        "summary": "Log out current user",
        "description": "Log out the currently authenticated user",
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Logout"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/d": {
      "get": {
        "tags": ["dao"],
        "summary": "Get all DAOs",
        "description": "Retrieve a list of all DAOs",
        "security": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Dao"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/d/{chainId}": {
      "get": {
        "tags": ["dao"],
        "summary": "Get DAOs by chain",
        "description": "Retrieve all DAOs for a specific chain",
        "security": [],
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Dao"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/d/{chainId}/{address}": {
      "get": {
        "tags": ["dao"],
        "summary": "Get DAO by address",
        "description": "Retrieve a specific DAO by chain ID and address",
        "security": [],
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Dao"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/d/{chainId}/{address}/proposals": {
      "get": {
        "tags": ["proposals"],
        "summary": "Get DAO proposals",
        "description": "Retrieve all proposals for a specific DAO",
        "security": [],
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Proposal"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["proposals"],
        "summary": "Create proposal",
        "description": "Create a new proposal for a DAO",
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProposal"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Proposal"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/d/{chainId}/{address}/proposals/{slug}": {
      "get": {
        "tags": ["proposals"],
        "summary": "Get proposal by slug",
        "description": "Retrieve a specific proposal by its slug",
        "security": [],
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Proposal"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["proposals"],
        "summary": "Update proposal",
        "description": "Update an existing proposal",
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProposal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Proposal"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/d/{chainId}/{address}/proposals/{slug}/comments": {
      "get": {
        "tags": ["comments"],
        "summary": "Get proposal comments",
        "description": "Retrieve all comments for a specific proposal",
        "security": [],
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Comment"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["comments"],
        "summary": "Create comment",
        "description": "Create a new comment on a proposal",
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewComment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Comment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/d/{chainId}/{address}/proposals/{slug}/comments/{id}": {
      "put": {
        "tags": ["comments"],
        "summary": "Update comment",
        "description": "Update an existing comment",
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Comment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["comments"],
        "summary": "Delete comment",
        "description": "Delete an existing comment",
        "security": [
          {
            "CookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    { "$ref": "#/components/schemas/ApiResponse" },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Comment"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {},
          "error": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "nullable": true
              },
              "message": {
                "type": "string"
              },
              "code": {
                "type": "string",
                "nullable": true
              },
              "details": {
                "nullable": true
              }
            },
            "required": ["message"]
          }
        },
        "required": ["success"]
      },
      "Meta": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": ["name", "version"]
      },
      "Health": {
        "type": "string",
        "enum": ["ok"]
      },
      "Permissions": {
        "type": "object",
        "properties": {
          "isProposer": {
            "type": "boolean"
          },
          "isVoter": {
            "type": "boolean"
          },
          "isSigner": {
            "type": "boolean"
          },
          "isModerator": {
            "type": "boolean"
          }
        },
        "required": ["isProposer", "isVoter", "isSigner", "isModerator"]
      },
      "User": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "ensName": {
            "type": "string",
            "nullable": true
          },
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          }
        },
        "required": ["address"]
      },
      "Nonce": {
        "type": "object",
        "properties": {
          "nonce": {
            "type": "string"
          }
        },
        "required": ["nonce"]
      },
      "Logout": {
        "type": "string",
        "enum": ["ok"]
      },
      "VerifySiwe": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          }
        },
        "required": ["message", "signature"]
      },
      "TokenType": {
        "type": "string",
        "enum": ["ERC20", "ERC721", "ERC1155"]
      },
      "Token": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TokenType"
          }
        },
        "required": ["address", "type"]
      },
      "Safe": {
        "type": "object",
        "properties": {
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "threshold": {
            "type": "integer"
          }
        },
        "required": ["owners", "threshold"]
      },
      "GasTank": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": ["enabled"]
      },
      "GovernanceCycle": {
        "type": "object",
        "properties": {
          "firstStart": {
            "type": "string",
            "format": "date-time"
          },
          "days": {
            "type": "integer"
          }
        },
        "required": ["firstStart", "days"]
      },
      "ProposalPermission": {
        "type": "object",
        "properties": {
          "threshold": {
            "type": "number"
          },
          "whitelist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "required": ["threshold"]
      },
      "VotingStrategy": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "nullable": true
          },
          "votingTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Token"
            }
          }
        },
        "required": ["address", "votingTokens"]
      },
      "GovernanceModule": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "strategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VotingStrategy"
            }
          }
        },
        "required": ["address", "strategies"]
      },
      "HatIdToStreamId": {
        "type": "object",
        "properties": {
          "hatId": {
            "type": "string"
          },
          "streamId": {
            "type": "string"
          }
        },
        "required": ["hatId", "streamId"]
      },
      "Dao": {
        "type": "object",
        "properties": {
          "chainId": {
            "type": "integer"
          },
          "address": {
            "type": "string"
          },
          "safe": {
            "$ref": "#/components/schemas/Safe",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "proposalTemplatesCID": {
            "type": "string",
            "nullable": true
          },
          "governanceModules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GovernanceModule"
            },
            "nullable": true
          },
          "hatIdToStreamIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HatIdToStreamId"
            },
            "nullable": true
          },
          "guardAddress": {
            "type": "string"
          },
          "fractalModuleAddress": {
            "type": "string",
            "nullable": true
          },
          "parent": {
            "type": "string",
            "nullable": true
          },
          "children": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "gastank": {
            "$ref": "#/components/schemas/GasTank",
            "nullable": true
          },
          "snapshotENS": {
            "type": "string",
            "nullable": true
          },
          "cycle": {
            "$ref": "#/components/schemas/GovernanceCycle",
            "nullable": true
          },
          "createdAt": {
            "type": "integer"
          },
          "updatedAt": {
            "type": "integer"
          }
        },
        "required": ["chainId", "address", "guardAddress", "createdAt", "updatedAt"]
      },
      "PaymentStream": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "cliff": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "amount": {
            "type": "number"
          },
          "cancelable": {
            "type": "boolean"
          },
          "transferable": {
            "type": "boolean"
          }
        },
        "required": ["start", "end", "amount", "cancelable", "transferable"]
      },
      "Role": {
        "type": "object",
        "properties": {
          "cid": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "canPropose": {
            "type": "boolean"
          },
          "term": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "payment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentStream"
            },
            "nullable": true
          }
        },
        "required": ["cid", "address", "canPropose"]
      },
      "Action": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          }
        },
        "required": ["address"]
      },
      "TransferAction": {
        "allOf": [
          { "$ref": "#/components/schemas/Action" },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string"
              }
            },
            "required": ["value"]
          }
        ]
      },
      "ContractActionParam": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": ["name", "type", "value"]
      },
      "ContractAction": {
        "allOf": [
          { "$ref": "#/components/schemas/Action" },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "abi": {
                "type": "object"
              },
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContractActionParam"
                },
                "nullable": true
              }
            },
            "required": ["name", "abi"]
          }
        ]
      },
      "ProposalTransaction": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            },
            "nullable": true
          }
        }
      },
      "YesNoVoteResult": {
        "type": "object",
        "properties": {
          "yes": {
            "type": "number"
          },
          "no": {
            "type": "number"
          },
          "abstain": {
            "type": "number"
          }
        },
        "required": ["yes", "no", "abstain"]
      },
      "YesNoVoteOption": {
        "type": "string",
        "enum": ["YES", "NO", "ABSTAIN"]
      },
      "Vote": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "weight": {
            "type": "number"
          },
          "timestamp": {
            "type": "integer"
          }
        },
        "required": ["address", "weight", "timestamp"]
      },
      "YesNoVote": {
        "allOf": [
          { "$ref": "#/components/schemas/Vote" },
          {
            "type": "object",
            "properties": {
              "vote": {
                "$ref": "#/components/schemas/YesNoVoteOption"
              }
            },
            "required": ["vote"]
          }
        ]
      },
      "MultipleChoiceVote": {
        "allOf": [
          { "$ref": "#/components/schemas/Vote" },
          {
            "type": "object",
            "properties": {
              "vote": {
                "type": "integer"
              }
            },
            "required": ["vote"]
          }
        ]
      },
      "MultipleChoiceVoteResult": {
        "type": "object",
        "properties": {
          "totalWeightVoted": {
            "type": "number"
          },
          "choice": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "required": ["totalWeightVoted", "choice"]
      },
      "ProposalChoice": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "tx": {
            "$ref": "#/components/schemas/ProposalTransaction"
          }
        },
        "required": ["text", "tx"]
      },
      "Proposal": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "authorAddress": {
            "type": "string"
          },
          "metadataCID": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "nullable": true
          },
          "safeNonce": {
            "type": "integer",
            "nullable": true
          },
          "executedTxHash": {
            "type": "string",
            "nullable": true
          },
          "votingStrategyAddress": {
            "type": "string",
            "nullable": true
          },
          "voteStartsAt": {
            "type": "integer",
            "nullable": true
          },
          "voteEndsAt": {
            "type": "integer",
            "nullable": true
          },
          "discussionId": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "integer"
          },
          "votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vote"
            },
            "nullable": true
          },
          "cycle": {
            "type": "integer",
            "nullable": true
          },
          "voteType": {
            "type": "string",
            "nullable": true
          },
          "voteChoices": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "createdAt": {
            "type": "integer"
          },
          "updatedAt": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": ["slug", "status", "authorAddress", "version", "createdAt"]
      },
      "NewProposal": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "voteType": {
            "type": "string"
          },
          "voteChoices": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cycle": {
            "type": "integer"
          },
          "votingStrategyAddress": {
            "type": "string"
          }
        },
        "required": ["title", "body", "voteType"]
      },
      "UpdateProposal": {
        "allOf": [
          { "$ref": "#/components/schemas/NewProposal" },
          {
            "type": "object",
            "properties": {
              "slug": {
                "type": "string"
              }
            },
            "required": ["slug"]
          }
        ]
      },
      "YesNoProposal": {
        "allOf": [
          { "$ref": "#/components/schemas/Proposal" },
          {
            "type": "object",
            "properties": {
              "thumbsUp": {
                "type": "number"
              },
              "thumbsDown": {
                "type": "number"
              },
              "thumbsUpWeighted": {
                "type": "number"
              },
              "thumbsDownWeighted": {
                "type": "number"
              },
              "tx": {
                "$ref": "#/components/schemas/ProposalTransaction"
              },
              "result": {
                "$ref": "#/components/schemas/YesNoVoteResult",
                "nullable": true
              }
            },
            "required": ["thumbsUp", "thumbsDown", "thumbsUpWeighted", "thumbsDownWeighted", "tx"]
          }
        ]
      },
      "MultipleChoiceProposal": {
        "allOf": [
          { "$ref": "#/components/schemas/Proposal" },
          {
            "type": "object",
            "properties": {
              "choices": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProposalChoice"
                }
              },
              "result": {
                "$ref": "#/components/schemas/MultipleChoiceVoteResult"
              }
            },
            "required": ["choices", "result"]
          }
        ]
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "replyToId": {
            "type": "string",
            "nullable": true
          },
          "proposalSlug": {
            "type": "string"
          },
          "authorAddress": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer"
          },
          "updatedAt": {
            "type": "integer",
            "nullable": true
          }
        },
        "required": ["id", "proposalSlug", "authorAddress", "content", "createdAt"]
      },
      "NewComment": {
        "type": "object",
        "properties": {
          "replyToId": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string"
          }
        },
        "required": ["content"]
      },
      "UpdateComment": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": ["content"]
      },
      "TokenBalance": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string"
          },
          "balance": {
            "type": "number"
          },
          "usdValue": {
            "type": "number"
          },
          "portfolioPercentage": {
            "type": "number",
            "nullable": true
          }
        },
        "required": ["tokenAddress", "balance", "usdValue"]
      },
      "Treasury": {
        "type": "object",
        "properties": {
          "totalUsdValue": {
            "type": "number"
          },
          "fungible": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenBalance"
            }
          },
          "nonFungible": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokenBalance"
            }
          }
        },
        "required": ["totalUsdValue", "fungible", "nonFungible"]
      }
    },
    "securitySchemes": {
      "CookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "decent-session"
      }
    }
  },
  "security": [
    {
      "CookieAuth": []
    }
  ],
  "tags": [
    {
      "name": "meta",
      "description": "API metadata and health endpoints"
    },
    {
      "name": "auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "dao",
      "description": "DAO-related operations"
    },
    {
      "name": "proposals",
      "description": "Proposal-related operations"
    },
    {
      "name": "comments",
      "description": "Comment-related operations"
    }
  ]
}
